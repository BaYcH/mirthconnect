# Mirth Connect configuration file
# directories
dir.appdata=appdata
dir.tempdata=${dir.appdata}/temp
# ports
http.port=8080
https.port=8443
# password requirements
password.minlength=0
password.minupper=0
password.minlower=0
password.minnumeric=0
password.minspecial=0
password.retrylimit=0
password.lockoutperiod=0
password.expiration=0
password.graceperiod=0
password.reuseperiod=0
password.reuselimit=0
# keystore
keystore.path=${dir.appdata}/keystore.jks
keystore.storepass=81uWxplDtB
keystore.keypass=81uWxplDtB
keystore.type=JCEKS
# server
http.contextpath=/
server.url=
http.host=0.0.0.0
https.host=0.0.0.0
https.client.protocols=TLSv1.2,TLSv1.1
https.server.protocols=TLSv1.2,TLSv1.1,SSLv2Hello
https.ciphersuites=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_DSS_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_DSS_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_DSS_WITH_AES_256_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_DSS_WITH_AES_256_CBC_SHA,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_DSS_WITH_AES_128_CBC_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_DSS_WITH_AES_128_CBC_SHA,TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_RSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA,TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA,SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA,TLS_EMPTY_RENEGOTIATION_INFO_SCSV
# Determines whether or not channels are deployed on server startup.
server.startupdeploy=true
# Determines whether libraries in the custom-lib directory will be included on the server classpath.
# To reduce potential classpath conflicts you should create Resources and use them on specific channels/connectors instead, and then set this value to false.
server.includecustomlib=false
# administrator
administrator.maxheapsize=512m
# properties file that will store the configuration map and be loaded during server startup
configurationmap.path=${dir.appdata}/configuration.properties
# options: derby, mysql, postgres, oracle, sqlserver
database=derby
# examples:
#	Derby		jdbc:derby:${dir.appdata}/mirthdb;create=true
#	PostgreSQL	jdbc:postgresql://localhost:5432/mirthdb
# 	MySQL		jdbc:mysql://localhost:3306/mirthdb
#	Oracle		jdbc:oracle:thin:@localhost:1521:DB
#	SQLServer	jdbc:jtds:sqlserver://localhost:1433/mirthdb
database.url=jdbc:derby:${dir.appdata}/mirth_data_db;create=true
# if using a custom driver, specify it here
#database.driver = 
# maximum number of connections allowed for the connection pool
database.max-connections=20
# database credentials
database.username=
database.password=
#配置数据库
# options: derby, mysql, postgres, oracle, sqlserver
config.database=derby
# examples:
#	Derby		jdbc:derby:${dir.appdata}/mirthdb;create=true
#	PostgreSQL	jdbc:postgresql://localhost:5432/mirthdb
# 	MySQL		jdbc:mysql://localhost:3306/mirthdb
#	Oracle		jdbc:oracle:thin:@localhost:1521:DB
#	SQLServer	jdbc:jtds:sqlserver://localhost:1433/mirthdb
config.database.url=jdbc:derby:${dir.appdata}/mirth_config_db;create=true
# if using a custom driver, specify it here
#database.driver =
# maximum number of connections allowed for the connection pool
config.database.max-connections=20
# database credentials
config.database.username=
config.database.password=
#kafka消费者
mq.kafka.consumer.bootstrap.servers=192.168.236.109:9092,192.168.236.110:9092,192.168.236.111:9092
mq.kafka.consumer.group.id=jd-group
mq.kafka.consumer.enable.auto.commit=false
mq.kafka.consumer.max.poll.records=100
mq.kafka.consumer.auto.offset.reset=latest
mq.kafka.consumer.session.timeout.ms=30000
mq.kafka.consumer.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mq.kafka.consumer.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
#kafka生产者
mq.kafka.producer.bootstrap.servers=192.168.236.109:9092,192.168.236.110:9092,192.168.236.111:9092
mq.kafka.producer.acks=all
mq.kafka.producer.retries=0
mq.kafka.producer.batch.size=16384
mq.kafka.producer.linger.ms=10
mq.kafka.producer.buffer.memory=33554432
mq.kafka.producer.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mq.kafka.producer.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#nacos
nacos.server.addr=127.0.0.1:8848
